---
AWSTemplateFormatVersion: '2010-09-09'
Description: ServiceCatalog Resource template for Serverless application (fdp-1p5rtpglk)
Parameters:
  FunctionName:
    Type: String
  FunctionStage:
    Type: String
    Description: test, dev, prod, ...
  BucketName:
    Type: String
  BucketKey:
    Type: String
    Description: The full key of the lambda package path in S3 without the bucket
      name.
  FunctionHandler:
    Type: String
    Default: wsgi.handler
  FunctionRuntime:
    Type: String
    Default: python2.7
    AllowedValues:
    - nodejs
    - nodejs4.3
    - nodejs6.10
    - nodejs8.10
    - nodejs4.3-edge
    - java8
    - python2.7
    - python3.6
    - dotnetcore1.0
    - dotnetcore2.0
    - dotnetcore2.1
    - go1.x
  FunctionMemorySize:
    Type: Number
    Default: 1024
  FunctionTimeout:
    Type: Number
    Default: 6
  LambdaVersionSHA256:
    Type: String
    Default: ''
  LambdaVersionSHA256update:
    Type: String
    Default: ''
Conditions:
  addlambdaversion:
    Fn::Not:
    - Fn::Equals:
      - Ref: LambdaVersionSHA256
      - ''
  updatelambdaversion:
    Fn::Not:
    - Fn::Equals:
      - Ref: LambdaVersionSHA256update
      - ''
Resources:
  AppLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: "/aws/lambda/${FunctionName}-${FunctionStage}"
  IamRoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName:
          Fn::Sub: "${FunctionStage}-${FunctionName}-lambda"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            Resource:
            - Fn::Sub: arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${FunctionName}-${FunctionStage}:*
          - Effect: Allow
            Action:
            - logs:PutLogEvents
            Resource:
            - Fn::Sub: arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${FunctionName}-${FunctionStage}:*:*
      Path: "/"
      RoleName:
        Fn::Sub: "${FunctionName}-${FunctionStage}-${AWS::Region}-lambdaRole"
  AppLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: BucketName
        S3Key:
          Ref: BucketKey
      FunctionName:
        Fn::Sub: "${FunctionName}-${FunctionStage}"
      Handler:
        Ref: FunctionHandler
      MemorySize:
        Ref: FunctionMemorySize
      Role:
        Fn::GetAtt:
        - IamRoleLambdaExecution
        - Arn
      Runtime:
        Ref: FunctionRuntime
      Timeout:
        Ref: FunctionTimeout
    DependsOn:
    - AppLogGroup
    - IamRoleLambdaExecution
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Fn::Sub: "${FunctionStage}-${FunctionName}"
      EndpointConfiguration:
        Types:
        - EDGE
  ApiGatewayResourceProxyVar:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: "{proxy+}"
      RestApiId:
        Ref: ApiGatewayRestApi
  ApiGatewayMethodAny:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId:
        Fn::GetAtt:
        - ApiGatewayRestApi
        - RootResourceId
      RestApiId:
        Ref: ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub:
          - arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaarn}/invocations
          - lambdaarn:
              Fn::GetAtt:
              - AppLambdaFunction
              - Arn
      MethodResponses: []
  ApiGatewayMethodProxyVarAny:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      RequestParameters: {}
      ResourceId:
        Ref: ApiGatewayResourceProxyVar
      RestApiId:
        Ref: ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub:
          - arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaarn}/invocations
          - lambdaarn:
              Fn::GetAtt:
              - AppLambdaFunction
              - Arn
      MethodResponses: []
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: ApiGatewayRestApi
      StageName:
        Ref: FunctionStage
    DependsOn:
    - ApiGatewayMethodAny
    - ApiGatewayMethodProxyVarAny
  AppLambdaVersion:
    Type: AWS::Lambda::Version
    Condition: addlambdaversion
    DeletionPolicy: Retain
    Properties:
      FunctionName:
        Ref: AppLambdaFunction
      CodeSha256:
        Ref: LambdaVersionSHA256
  AppLambdaVersionupdate:
    Type: AWS::Lambda::Version
    Condition: updatelambdaversion
    DeletionPolicy: Retain
    Properties:
      FunctionName:
        Ref: AppLambdaFunction
      CodeSha256:
        Ref: LambdaVersionSHA256update
  AppLambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - AppLambdaFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal:
        Fn::Sub: apigateway.${AWS::URLSuffix}
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*
Outputs:
  LambdaVersionHash:
    Description: SHA256 hash of the latest lambda version
    Value:
      Ref: LambdaVersionSHA256
    Condition: addlambdaversion
  UpdatedLambdaVersionHash:
    Description: The new SHA256 hash of the latest lambda version
    Value:
      Ref: LambdaVersionSHA256update
    Condition: updatelambdaversion
  ServiceEndpoint:
    Description: URL of the service endpoint
    Value:
      Fn::Sub: https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${FunctionStage}
    Export:
      Name:
        Fn::Sub: "${FunctionName}-ServiceEndpoint"
